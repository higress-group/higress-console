/*
 * Copyright (c) 2022-2023 Alibaba Group Holding Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package com.alibaba.higress.console.service;

import com.alibaba.higress.console.controller.dto.CommonPageQuery;
import com.alibaba.higress.console.controller.dto.McpBridge;
import com.alibaba.higress.console.controller.dto.PaginatedResult;
import com.alibaba.higress.console.controller.exception.AlreadyExistedException;
import com.alibaba.higress.console.controller.exception.BusinessException;
import com.alibaba.higress.console.service.kubernetes.KubernetesClientService;
import com.alibaba.higress.console.service.kubernetes.KubernetesModelConverter;
import com.alibaba.higress.console.service.kubernetes.crd.mcp.V1McpBridge;
import io.kubernetes.client.openapi.ApiException;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.List;

@Service
public class McpBridgeServiceImpl implements McpBridgeService {

    private KubernetesClientService kubernetesClientService;
    private KubernetesModelConverter kubernetesModelConverter;

    @Resource
    public void setKubernetesClientService(KubernetesClientService kubernetesClientService) {
        this.kubernetesClientService = kubernetesClientService;
    }

    @Resource
    public void setKubernetesModelConverter(KubernetesModelConverter kubernetesModelConverter) {
        this.kubernetesModelConverter = kubernetesModelConverter;
    }

    @Override
    public PaginatedResult<McpBridge> list(CommonPageQuery query) {
        List<V1McpBridge> v1McpBridges = kubernetesClientService.listV1McpBridge();
        return PaginatedResult.createFromFullList(v1McpBridges, query,
                kubernetesModelConverter::v1McpBridge2McpBridge);
    }

    @Override
    public McpBridge add(McpBridge mcpBridge) {
        V1McpBridge v1McpBridge = kubernetesModelConverter.mcpBridge2V1McpBridge(mcpBridge);
        V1McpBridge newV1McpBridge = null;
        try {
            newV1McpBridge = kubernetesClientService.addV1McpBridge(v1McpBridge);
        } catch (ApiException e) {
            if (e.getCode() == HttpStatus.CONFLICT.value()) {
                throw new AlreadyExistedException();
            }
            throw new BusinessException(
                    "Error occurs when add the McpBridge generated by McpBridge with name: " + mcpBridge.getName(), e);
        }
        return kubernetesModelConverter.v1McpBridge2McpBridge(newV1McpBridge);
    }

    @Override
    public McpBridge update(McpBridge mcpBridge) {
        V1McpBridge newV1McpBridge = null;
        try {
            V1McpBridge oldV1McpBridge = kubernetesClientService.getV1McpBridge(mcpBridge.getName());
            V1McpBridge v1McpBridge = kubernetesModelConverter.mcpBridge2V1McpBridge(mcpBridge,oldV1McpBridge);
            newV1McpBridge = kubernetesClientService.updateV1McpBridge(v1McpBridge);
        } catch (ApiException e) {
            throw new BusinessException(
                "Error occurs when updating the mcpBridge generated by mcpBridge with name: " + mcpBridge.getName(), e);
        }
        return kubernetesModelConverter.v1McpBridge2McpBridge(newV1McpBridge);
    }

    @Override
    public void delete(String name) {
        try {
            kubernetesClientService.deleteV1McpBridge(name);
        } catch (ApiException e) {
            throw new BusinessException("Error occurs when deleting the McpBridge with name: " + name, e);
        }
    }
}
