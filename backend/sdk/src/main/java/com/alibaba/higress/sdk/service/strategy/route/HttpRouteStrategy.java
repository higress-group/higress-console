/*
 * Copyright (c) 2022-2023 Alibaba Group Holding Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package com.alibaba.higress.sdk.service.strategy.route;

import com.alibaba.higress.sdk.constant.HigressConstants;
import com.alibaba.higress.sdk.constant.Separators;
import com.alibaba.higress.sdk.exception.BusinessException;
import com.alibaba.higress.sdk.exception.ResourceConflictException;
import com.alibaba.higress.sdk.http.HttpStatus;
import com.alibaba.higress.sdk.model.Domain;
import com.alibaba.higress.sdk.model.Route;
import com.alibaba.higress.sdk.model.WasmPluginInstanceScope;
import com.alibaba.higress.sdk.service.WasmPluginInstanceService;
import com.alibaba.higress.sdk.service.kubernetes.KubernetesClientService;
import com.alibaba.higress.sdk.service.kubernetes.KubernetesModelConverter;
import com.alibaba.higress.sdk.service.kubernetes.crd.gatewayapi.gateways.V1Gateway;
import com.alibaba.higress.sdk.service.kubernetes.crd.gatewayapi.httproute.V1HTTPRoute;
import io.kubernetes.client.openapi.ApiException;
import io.kubernetes.client.openapi.models.V1ConfigMap;
import org.apache.commons.lang3.StringUtils;

import java.util.List;

public class HttpRouteStrategy implements RouteStrategy {

    private final KubernetesClientService kubernetesClientService;
    private final KubernetesModelConverter kubernetesModelConverter;
    private final WasmPluginInstanceService wasmPluginInstanceService;


    public HttpRouteStrategy(KubernetesClientService kubernetesClientService, KubernetesModelConverter kubernetesModelConverter, WasmPluginInstanceService wasmPluginInstanceService) {
        this.kubernetesClientService = kubernetesClientService;
        this.kubernetesModelConverter = kubernetesModelConverter;
        this.wasmPluginInstanceService = wasmPluginInstanceService;
    }

    @Override
    public Route add(Route route) {
        createIfDomainIsNotGateway(route.getDomains());
        V1HTTPRoute httpRoute = kubernetesModelConverter.route2HttpRoute(route);
        V1HTTPRoute newHttpRoute;
        try {
            newHttpRoute = kubernetesClientService.createHttpRoute(httpRoute);
        } catch (ApiException e) {
            if (e.getCode() == HttpStatus.CONFLICT) {
                throw new ResourceConflictException();
            }
            throw new BusinessException(
                    "Error occurs when adding the HTTPRoute generated by route with name: " + route.getName(), e);
        }
        return kubernetesModelConverter.httpRoute2Route(newHttpRoute);
    }

    @Override
    public Route update(Route route) {
        createIfDomainIsNotGateway(route.getDomains());
        V1HTTPRoute httpRoute = kubernetesModelConverter.route2HttpRoute(route);
        V1HTTPRoute updatedHttpRoute;
        try {
            updatedHttpRoute = kubernetesClientService.replaceHttpRoute(httpRoute);
        } catch (ApiException e) {
            if (e.getCode() == HttpStatus.CONFLICT) {
                throw new ResourceConflictException();
            }
            throw new BusinessException(
                    "Error occurs when updating the HTTP route generated by route with name: " + route.getName(), e);
        }
        return kubernetesModelConverter.httpRoute2Route(updatedHttpRoute);
    }

    @Override
    public void delete(String name) {
        try {
            kubernetesClientService.deleteHttpRoute(name);
            if (!HigressConstants.NS_DEFAULT.equals(kubernetesClientService.httpRouteNameSpace)) {
                name = kubernetesClientService.httpRouteNameSpace + Separators.SLASH + name;
            }
        } catch (ApiException e) {
            throw new BusinessException("Error occurs when deleting HTTP route with name: " + name, e);
        }
        wasmPluginInstanceService.deleteAll(WasmPluginInstanceScope.ROUTE, name);
    }

    public void createIfDomainIsNotGateway(List<String> domains) {
        if (domains.isEmpty()) {
            return;
        }
        // if domain is ingress-style,  create a gateway cr
        String domainName = domains.get(0);
        V1ConfigMap configMap;
        try {
            configMap = kubernetesClientService.readConfigMap(kubernetesModelConverter.domainName2ConfigMapName(domainName));
        } catch (ApiException e) {
            throw new BusinessException("Error occurs when reading config map associated with domain " + domainName,
                    e);
        }
        if (configMap == null) {
            return;
        }
        Domain domain = kubernetesModelConverter.configMap2Domain(configMap);
        if (domain.getIsIngressMode()) {
            domain.setIsIngressMode(Boolean.FALSE);
            V1ConfigMap domainConfigMap = kubernetesModelConverter.domain2ConfigMap(domain);
            V1ConfigMap updatedConfigMap;
            try {
                updatedConfigMap = kubernetesClientService.replaceConfigMap(domainConfigMap);
            } catch (ApiException e) {
                if (e.getCode() == HttpStatus.CONFLICT) {
                    throw new ResourceConflictException();
                }
                throw new BusinessException(
                        "Error occurs when replacing the ConfigMap generated by domain: " + domain.getName(), e);
            }
            domain = kubernetesModelConverter.configMap2Domain(updatedConfigMap);
            V1Gateway gateway = kubernetesModelConverter.domain2Gateway(domain);
            gateway.getMetadata().setResourceVersion(StringUtils.EMPTY);
            try {
                kubernetesClientService.createGateway(gateway);
            } catch (ApiException e) {
                throw new BusinessException("Error occurs when creating a Gateway", e);
            }
        }
    }
}
