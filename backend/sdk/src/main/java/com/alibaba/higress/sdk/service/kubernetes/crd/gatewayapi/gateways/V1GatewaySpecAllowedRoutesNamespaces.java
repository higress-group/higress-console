/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alibaba.higress.sdk.service.kubernetes.crd.gatewayapi.gateways;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

import java.io.IOException;
import java.util.Objects;

/**
 * Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default.   Support: Core
 */
@Data
public class V1GatewaySpecAllowedRoutesNamespaces {
  /**
   * From indicates where Routes will be selected for this Gateway. Possible values are:   * All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by   this Gateway. * Same: Only Routes in the same namespace may be used by this Gateway.   Support: Core
   */
  @JsonAdapter(FromEnum.Adapter.class)
  public enum FromEnum {
    ALL("All"),
    SELECTOR("Selector"),
    SAME("Same");
    private String value;

    FromEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FromEnum fromValue(String value) {
      for (FromEnum b : FromEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FromEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FromEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FromEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FromEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private FromEnum from;


  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  private V1GatewaySpecAllowedRoutesNamespacesSelector selector;

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1GatewaySpecAllowedRoutesNamespaces v1GatewaySpecAllowedRoutesNamespaces = (V1GatewaySpecAllowedRoutesNamespaces) o;
    return Objects.equals(this.from, v1GatewaySpecAllowedRoutesNamespaces.from) &&
        Objects.equals(this.selector, v1GatewaySpecAllowedRoutesNamespaces.selector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, selector);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1beta1GatewaySpecAllowedRoutesNamespaces {\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

